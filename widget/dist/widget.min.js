class CodeHoursStopwatch extends HTMLElement{static get observedAttributes(){return["size","color","font","fontUrl","dataTimeSpan","user"]}constructor(){super(),this.attachShadow({mode:"open"}),this.totalTime=0,this.isCoding=!1,this.lastUpdateTimestamp=null,this.localTimer=null,this.pollingTimer=null}connectedCallback(){this.render(),this.initializeData(),this.localTimer=setInterval(()=>{this.isCoding&&(this.totalTime+=1,this.updateDisplay())},1e3),this.pollingTimer=setInterval(()=>{this.fetchCodingTime()},12e4)}disconnectedCallback(){this.localTimer&&clearInterval(this.localTimer),this.pollingTimer&&clearInterval(this.pollingTimer)}attributeChangedCallback(t,i,e){this.updateDisplay()}async initializeData(){await this.fetchCodingTime()}async fetchCodingTime(){var t=this.getAttribute("user");if(t)try{var i=await(await fetch("http://localhost:3000/api/codingTime?user="+t)).json(),e=Math.floor(i.totalTime/1e3),s=i.isCoding;e===this.totalTime&&s===this.isCoding||(this.totalTime=e,this.isCoding=s,this.lastUpdateTimestamp=new Date(i.lastUpdated),this.updateDisplay())}catch(t){console.error("CodeHoursStopwatch: Error fetching coding time",t)}else console.error("CodeHoursStopwatch: 'user' attribute is required.")}formatTime(t){return String(Math.floor(t/3600)).padStart(2,"0")+`:${String(Math.floor(t%3600/60)).padStart(2,"0")}:`+String(t%60).padStart(2,"0")}updateDisplay(){var t=this.getAttribute("size"),i=this.getAttribute("color")||"#000",e=this.getAttribute("font"),s=this.getAttribute("fontUrl"),a=this.getAttribute("dataTimeSpan")||"daily",o=this.formatTime(this.totalTime);this.shadowRoot.innerHTML=`
        <style>
        ${s?`@font-face {
          font-family: 'userFontByUrl';
          src: url('${s}');
        }`:""}
          .stopwatch {
            font-size: ${t};
            color: ${i};
            font-family: ${e?`'${e}', sans-serif`:s&&"'userFontByUrl', sans-serif"}
            display: inline-block;
          }
        </style>
        <div class="stopwatch">
          ${o} (${a})
        </div>
      `}render(){this.shadowRoot.innerHTML='<div class="stopwatch">Loading...</div>'}}customElements.define("codehours-stopwatch",CodeHoursStopwatch);